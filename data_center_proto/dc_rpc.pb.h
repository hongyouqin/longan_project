// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dc_rpc.proto

#ifndef PROTOBUF_INCLUDED_dc_5frpc_2eproto
#define PROTOBUF_INCLUDED_dc_5frpc_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_dc_5frpc_2eproto 

namespace protobuf_dc_5frpc_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[4];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_dc_5frpc_2eproto
namespace proto {
class Empty;
class EmptyDefaultTypeInternal;
extern EmptyDefaultTypeInternal _Empty_default_instance_;
class Feature;
class FeatureDefaultTypeInternal;
extern FeatureDefaultTypeInternal _Feature_default_instance_;
class StorageReply;
class StorageReplyDefaultTypeInternal;
extern StorageReplyDefaultTypeInternal _StorageReply_default_instance_;
class UserParam;
class UserParamDefaultTypeInternal;
extern UserParamDefaultTypeInternal _UserParam_default_instance_;
}  // namespace proto
namespace google {
namespace protobuf {
template<> ::proto::Empty* Arena::CreateMaybeMessage<::proto::Empty>(Arena*);
template<> ::proto::Feature* Arena::CreateMaybeMessage<::proto::Feature>(Arena*);
template<> ::proto::StorageReply* Arena::CreateMaybeMessage<::proto::StorageReply>(Arena*);
template<> ::proto::UserParam* Arena::CreateMaybeMessage<::proto::UserParam>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace proto {

// ===================================================================

class Empty : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.Empty) */ {
 public:
  Empty();
  virtual ~Empty();

  Empty(const Empty& from);

  inline Empty& operator=(const Empty& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Empty(Empty&& from) noexcept
    : Empty() {
    *this = ::std::move(from);
  }

  inline Empty& operator=(Empty&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Empty& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Empty* internal_default_instance() {
    return reinterpret_cast<const Empty*>(
               &_Empty_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Empty* other);
  friend void swap(Empty& a, Empty& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Empty* New() const final {
    return CreateMaybeMessage<Empty>(NULL);
  }

  Empty* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Empty>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Empty& from);
  void MergeFrom(const Empty& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Empty* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:proto.Empty)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_dc_5frpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Feature : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.Feature) */ {
 public:
  Feature();
  virtual ~Feature();

  Feature(const Feature& from);

  inline Feature& operator=(const Feature& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Feature(Feature&& from) noexcept
    : Feature() {
    *this = ::std::move(from);
  }

  inline Feature& operator=(Feature&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Feature& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Feature* internal_default_instance() {
    return reinterpret_cast<const Feature*>(
               &_Feature_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Feature* other);
  friend void swap(Feature& a, Feature& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Feature* New() const final {
    return CreateMaybeMessage<Feature>(NULL);
  }

  Feature* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Feature>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Feature& from);
  void MergeFrom(const Feature& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Feature* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .proto.UserParam face = 1;
  bool has_face() const;
  void clear_face();
  static const int kFaceFieldNumber = 1;
  private:
  const ::proto::UserParam& _internal_face() const;
  public:
  const ::proto::UserParam& face() const;
  ::proto::UserParam* release_face();
  ::proto::UserParam* mutable_face();
  void set_allocated_face(::proto::UserParam* face);

  // @@protoc_insertion_point(class_scope:proto.Feature)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::proto::UserParam* face_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_dc_5frpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserParam : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.UserParam) */ {
 public:
  UserParam();
  virtual ~UserParam();

  UserParam(const UserParam& from);

  inline UserParam& operator=(const UserParam& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserParam(UserParam&& from) noexcept
    : UserParam() {
    *this = ::std::move(from);
  }

  inline UserParam& operator=(UserParam&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserParam& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserParam* internal_default_instance() {
    return reinterpret_cast<const UserParam*>(
               &_UserParam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(UserParam* other);
  friend void swap(UserParam& a, UserParam& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserParam* New() const final {
    return CreateMaybeMessage<UserParam>(NULL);
  }

  UserParam* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UserParam>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UserParam& from);
  void MergeFrom(const UserParam& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserParam* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string face_photo = 3;
  void clear_face_photo();
  static const int kFacePhotoFieldNumber = 3;
  const ::std::string& face_photo() const;
  void set_face_photo(const ::std::string& value);
  #if LANG_CXX11
  void set_face_photo(::std::string&& value);
  #endif
  void set_face_photo(const char* value);
  void set_face_photo(const char* value, size_t size);
  ::std::string* mutable_face_photo();
  ::std::string* release_face_photo();
  void set_allocated_face_photo(::std::string* face_photo);

  // bytes face_feature = 4;
  void clear_face_feature();
  static const int kFaceFeatureFieldNumber = 4;
  const ::std::string& face_feature() const;
  void set_face_feature(const ::std::string& value);
  #if LANG_CXX11
  void set_face_feature(::std::string&& value);
  #endif
  void set_face_feature(const char* value);
  void set_face_feature(const void* value, size_t size);
  ::std::string* mutable_face_feature();
  ::std::string* release_face_feature();
  void set_allocated_face_feature(::std::string* face_feature);

  // uint64 user_id = 2;
  void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  ::google::protobuf::uint64 user_id() const;
  void set_user_id(::google::protobuf::uint64 value);

  // uint64 face_size = 5;
  void clear_face_size();
  static const int kFaceSizeFieldNumber = 5;
  ::google::protobuf::uint64 face_size() const;
  void set_face_size(::google::protobuf::uint64 value);

  // uint64 acquisition_time = 6;
  void clear_acquisition_time();
  static const int kAcquisitionTimeFieldNumber = 6;
  ::google::protobuf::uint64 acquisition_time() const;
  void set_acquisition_time(::google::protobuf::uint64 value);

  // uint32 face_score = 7;
  void clear_face_score();
  static const int kFaceScoreFieldNumber = 7;
  ::google::protobuf::uint32 face_score() const;
  void set_face_score(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.UserParam)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr face_photo_;
  ::google::protobuf::internal::ArenaStringPtr face_feature_;
  ::google::protobuf::uint64 user_id_;
  ::google::protobuf::uint64 face_size_;
  ::google::protobuf::uint64 acquisition_time_;
  ::google::protobuf::uint32 face_score_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_dc_5frpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class StorageReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.StorageReply) */ {
 public:
  StorageReply();
  virtual ~StorageReply();

  StorageReply(const StorageReply& from);

  inline StorageReply& operator=(const StorageReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StorageReply(StorageReply&& from) noexcept
    : StorageReply() {
    *this = ::std::move(from);
  }

  inline StorageReply& operator=(StorageReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const StorageReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StorageReply* internal_default_instance() {
    return reinterpret_cast<const StorageReply*>(
               &_StorageReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(StorageReply* other);
  friend void swap(StorageReply& a, StorageReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StorageReply* New() const final {
    return CreateMaybeMessage<StorageReply>(NULL);
  }

  StorageReply* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<StorageReply>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const StorageReply& from);
  void MergeFrom(const StorageReply& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StorageReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool is_success = 1;
  void clear_is_success();
  static const int kIsSuccessFieldNumber = 1;
  bool is_success() const;
  void set_is_success(bool value);

  // @@protoc_insertion_point(class_scope:proto.StorageReply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool is_success_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_dc_5frpc_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Empty

// -------------------------------------------------------------------

// Feature

// .proto.UserParam face = 1;
inline bool Feature::has_face() const {
  return this != internal_default_instance() && face_ != NULL;
}
inline void Feature::clear_face() {
  if (GetArenaNoVirtual() == NULL && face_ != NULL) {
    delete face_;
  }
  face_ = NULL;
}
inline const ::proto::UserParam& Feature::_internal_face() const {
  return *face_;
}
inline const ::proto::UserParam& Feature::face() const {
  const ::proto::UserParam* p = face_;
  // @@protoc_insertion_point(field_get:proto.Feature.face)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::UserParam*>(
      &::proto::_UserParam_default_instance_);
}
inline ::proto::UserParam* Feature::release_face() {
  // @@protoc_insertion_point(field_release:proto.Feature.face)
  
  ::proto::UserParam* temp = face_;
  face_ = NULL;
  return temp;
}
inline ::proto::UserParam* Feature::mutable_face() {
  
  if (face_ == NULL) {
    auto* p = CreateMaybeMessage<::proto::UserParam>(GetArenaNoVirtual());
    face_ = p;
  }
  // @@protoc_insertion_point(field_mutable:proto.Feature.face)
  return face_;
}
inline void Feature::set_allocated_face(::proto::UserParam* face) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete face_;
  }
  if (face) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      face = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, face, submessage_arena);
    }
    
  } else {
    
  }
  face_ = face;
  // @@protoc_insertion_point(field_set_allocated:proto.Feature.face)
}

// -------------------------------------------------------------------

// UserParam

// string name = 1;
inline void UserParam::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserParam::name() const {
  // @@protoc_insertion_point(field_get:proto.UserParam.name)
  return name_.GetNoArena();
}
inline void UserParam::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.UserParam.name)
}
#if LANG_CXX11
inline void UserParam::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.UserParam.name)
}
#endif
inline void UserParam::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.UserParam.name)
}
inline void UserParam::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.UserParam.name)
}
inline ::std::string* UserParam::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:proto.UserParam.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserParam::release_name() {
  // @@protoc_insertion_point(field_release:proto.UserParam.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserParam::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:proto.UserParam.name)
}

// uint64 user_id = 2;
inline void UserParam::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 UserParam::user_id() const {
  // @@protoc_insertion_point(field_get:proto.UserParam.user_id)
  return user_id_;
}
inline void UserParam::set_user_id(::google::protobuf::uint64 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:proto.UserParam.user_id)
}

// string face_photo = 3;
inline void UserParam::clear_face_photo() {
  face_photo_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserParam::face_photo() const {
  // @@protoc_insertion_point(field_get:proto.UserParam.face_photo)
  return face_photo_.GetNoArena();
}
inline void UserParam::set_face_photo(const ::std::string& value) {
  
  face_photo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.UserParam.face_photo)
}
#if LANG_CXX11
inline void UserParam::set_face_photo(::std::string&& value) {
  
  face_photo_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.UserParam.face_photo)
}
#endif
inline void UserParam::set_face_photo(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  face_photo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.UserParam.face_photo)
}
inline void UserParam::set_face_photo(const char* value, size_t size) {
  
  face_photo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.UserParam.face_photo)
}
inline ::std::string* UserParam::mutable_face_photo() {
  
  // @@protoc_insertion_point(field_mutable:proto.UserParam.face_photo)
  return face_photo_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserParam::release_face_photo() {
  // @@protoc_insertion_point(field_release:proto.UserParam.face_photo)
  
  return face_photo_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserParam::set_allocated_face_photo(::std::string* face_photo) {
  if (face_photo != NULL) {
    
  } else {
    
  }
  face_photo_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), face_photo);
  // @@protoc_insertion_point(field_set_allocated:proto.UserParam.face_photo)
}

// bytes face_feature = 4;
inline void UserParam::clear_face_feature() {
  face_feature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserParam::face_feature() const {
  // @@protoc_insertion_point(field_get:proto.UserParam.face_feature)
  return face_feature_.GetNoArena();
}
inline void UserParam::set_face_feature(const ::std::string& value) {
  
  face_feature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.UserParam.face_feature)
}
#if LANG_CXX11
inline void UserParam::set_face_feature(::std::string&& value) {
  
  face_feature_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.UserParam.face_feature)
}
#endif
inline void UserParam::set_face_feature(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  face_feature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.UserParam.face_feature)
}
inline void UserParam::set_face_feature(const void* value, size_t size) {
  
  face_feature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.UserParam.face_feature)
}
inline ::std::string* UserParam::mutable_face_feature() {
  
  // @@protoc_insertion_point(field_mutable:proto.UserParam.face_feature)
  return face_feature_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserParam::release_face_feature() {
  // @@protoc_insertion_point(field_release:proto.UserParam.face_feature)
  
  return face_feature_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserParam::set_allocated_face_feature(::std::string* face_feature) {
  if (face_feature != NULL) {
    
  } else {
    
  }
  face_feature_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), face_feature);
  // @@protoc_insertion_point(field_set_allocated:proto.UserParam.face_feature)
}

// uint64 face_size = 5;
inline void UserParam::clear_face_size() {
  face_size_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 UserParam::face_size() const {
  // @@protoc_insertion_point(field_get:proto.UserParam.face_size)
  return face_size_;
}
inline void UserParam::set_face_size(::google::protobuf::uint64 value) {
  
  face_size_ = value;
  // @@protoc_insertion_point(field_set:proto.UserParam.face_size)
}

// uint64 acquisition_time = 6;
inline void UserParam::clear_acquisition_time() {
  acquisition_time_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 UserParam::acquisition_time() const {
  // @@protoc_insertion_point(field_get:proto.UserParam.acquisition_time)
  return acquisition_time_;
}
inline void UserParam::set_acquisition_time(::google::protobuf::uint64 value) {
  
  acquisition_time_ = value;
  // @@protoc_insertion_point(field_set:proto.UserParam.acquisition_time)
}

// uint32 face_score = 7;
inline void UserParam::clear_face_score() {
  face_score_ = 0u;
}
inline ::google::protobuf::uint32 UserParam::face_score() const {
  // @@protoc_insertion_point(field_get:proto.UserParam.face_score)
  return face_score_;
}
inline void UserParam::set_face_score(::google::protobuf::uint32 value) {
  
  face_score_ = value;
  // @@protoc_insertion_point(field_set:proto.UserParam.face_score)
}

// -------------------------------------------------------------------

// StorageReply

// bool is_success = 1;
inline void StorageReply::clear_is_success() {
  is_success_ = false;
}
inline bool StorageReply::is_success() const {
  // @@protoc_insertion_point(field_get:proto.StorageReply.is_success)
  return is_success_;
}
inline void StorageReply::set_is_success(bool value) {
  
  is_success_ = value;
  // @@protoc_insertion_point(field_set:proto.StorageReply.is_success)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_dc_5frpc_2eproto
